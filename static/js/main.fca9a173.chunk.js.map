{"version":3,"sources":["styles.js","AddDateTimeCell.js","state/reducer.js","state/initalState.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","AddDateTimeCell","row","timezoneIndex","open","dispatch","React","useState","anchorEl","setAnchorEl","textValue","setTextValue","classes","TableCell","IconButton","aria-describedby","onClick","event","timezone","currentTarget","type","handleClick","name","AddAlarm","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","className","container","noValidate","style","padding","TextField","label","defaultValue","times","format","textField","InputLabelProps","shrink","variant","onChange","target","value","color","console","log","utcDateTime","moment","tz","Done","createData","timezones","baseTimesUtc","map","item","getTimes","baseTime","push","reducer","state","action","data","some","filter","popoverOpen","Error","storedTimezones","localStorage","getItem","JSON","parse","storedBaseTimesUtc","time","App","useReducer","initialState","autocompleteValue","autocompleteInputValue","setAutocompleteInputValue","useEffect","setItem","stringify","interval","setInterval","clearInterval","Container","component","maxWidth","CssBaseline","Avatar","Schedule","Typography","TableContainer","Paper","Table","table","aria-label","TableHead","TableRow","align","TableBody","key","scope","DeleteOutline","timeIndex","FormControl","formControl","Autocomplete","newValue","inputValue","onInputChange","newInputValue","options","timezoneList","renderInput","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fca9a173.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n","import React from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport { AddAlarm, Done } from '@material-ui/icons';\nimport Popover from '@material-ui/core/Popover';\nimport TableCell from '@material-ui/core/TableCell';\nimport IconButton from '@material-ui/core/IconButton';\nimport moment from 'moment-timezone';\n\nimport { useStyles } from './styles';\n\nfunction AddDateTimeCell({ row, timezoneIndex, open, dispatch }) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [textValue, setTextValue] = React.useState(null);\n\n  const handleClick = (event, timezone) => {\n    setAnchorEl(event.currentTarget);\n\n    dispatch({ type: 'openPopover', timezone });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    dispatch({ type: 'openPopover', timezone: null });\n  };\n  const handleChange = (event) => {\n    setTextValue(event.target.value);\n  };\n\n  const addDateTime = () => {\n    console.log(textValue);\n\n    dispatch({\n      type: 'addTime',\n      utcDateTime: moment.tz(textValue, row.name).tz('UTC')\n    });\n  };\n\n  const classes = useStyles();\n  if (!row) {\n    return {};\n  }\n\n  return (\n    <TableCell>\n      <IconButton\n        aria-describedby={open ? `popover-${timezoneIndex}` : ''}\n        onClick={(event) => handleClick(event, row.name)}\n      >\n        <AddAlarm />\n      </IconButton>\n      <Popover\n        id={open ? `popover-${timezoneIndex}` : ''}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center'\n        }}\n      >\n        <form className={classes.container} noValidate style={{ padding: 20 }}>\n          <TextField\n            id=\"datetime-local\"\n            label=\"Date/Time\"\n            type=\"datetime-local\"\n            defaultValue={\n              row.times &&\n              row.times[0] &&\n              row.times[0].format('YYYY-MM-DDTHH:mm')\n            }\n            className={classes.textField}\n            InputLabelProps={{\n              shrink: true\n            }}\n            variant=\"outlined\"\n            onChange={handleChange}\n          />\n          <IconButton color=\"primary\" variant=\"contained\" onClick={addDateTime}>\n            <Done />\n          </IconButton>\n        </form>\n      </Popover>\n    </TableCell>\n  );\n}\n\nexport default AddDateTimeCell;\n","import moment from 'moment-timezone';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'setData':\n      return {\n        ...state,\n        data: createData(state.timezones, state.baseTimesUtc)\n      };\n    case 'addTimezone':\n      if (\n        action.value &&\n        !state.timezones.some((item) => item === action.value)\n      ) {\n        state.timezones = [...state.timezones, action.value];\n        return {\n          ...state,\n          timezones: state.timezones,\n          data: createData(state.timezones, state.baseTimesUtc)\n        };\n      }\n      return state;\n    case 'deleteTimezone':\n      if (\n        action.value &&\n        state.timezones.some((item) => item === action.value)\n      ) {\n        state.timezones = [\n          ...state.timezones.filter((timezone) => timezone !== action.value)\n        ];\n        return {\n          ...state,\n          timezones: state.timezones,\n          data: createData(state.timezones, state.baseTimesUtc)\n        };\n      }\n      return state;\n    case 'openPopover':\n      return {\n        ...state,\n        popoverOpen: action.timezone\n      };\n    case 'addTime':\n      return {\n        ...state,\n        baseTimesUtc: [...state.baseTimesUtc, action.utcDateTime]\n      };\n    default:\n      throw new Error();\n  }\n}\nfunction createData(timezones, baseTimesUtc) {\n  return timezones.map((item) => {\n    return { name: item, times: getTimes(item, baseTimesUtc) };\n  });\n}\nfunction getTimes(timezone, baseTimesUtc) {\n  const times = [moment.tz(timezone)];\n  for (const baseTime of baseTimesUtc) {\n    times.push(baseTime.tz(timezone));\n  }\n  return times;\n}\nexport default reducer;\n","import moment from 'moment-timezone';\n\nlet storedTimezones = localStorage.getItem('timezones');\nstoredTimezones = storedTimezones && JSON.parse(storedTimezones);\n\nlet storedBaseTimesUtc = localStorage.getItem('baseTimesUtc');\nstoredBaseTimesUtc =\n  storedBaseTimesUtc &&\n  JSON.parse(storedBaseTimesUtc).map((time) => moment(time));\n\nexport default {\n  timezones: storedTimezones || ['UTC'],\n  baseTimesUtc: storedBaseTimesUtc || [],\n  data: []\n};\n","import React, { useEffect, useReducer } from 'react';\nimport './App.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport { DeleteOutline, Schedule } from '@material-ui/icons';\nimport Typography from '@material-ui/core/Typography';\n\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport timezoneList from './timezone-list';\nimport AddDateTimeCell from './AddDateTimeCell';\nimport { useStyles } from './styles';\nimport reducer from './state/reducer';\nimport initialState from './state/initalState';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [autocompleteValue] = React.useState(null);\n  const [autocompleteInputValue, setAutocompleteInputValue] = React.useState(\n    ''\n  );\n\n  useEffect(() => {\n    localStorage.setItem('timezones', JSON.stringify(state.timezones));\n  }, [state.timezones]);\n\n  useEffect(() => {\n    localStorage.setItem('baseTimesUtc', JSON.stringify(state.baseTimesUtc));\n  }, [state.baseTimesUtc]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch({ type: 'setData' });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const addNewTimezone = () => {\n    return (\n      <TableRow key=\"newTimezone\">\n        <TableCell>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              value={autocompleteValue}\n              onChange={(event, newValue) => {\n                dispatch({ type: 'addTimezone', value: newValue });\n                setAutocompleteInputValue('');\n              }}\n              inputValue={autocompleteInputValue}\n              onInputChange={(event, newInputValue) => {\n                setAutocompleteInputValue(newInputValue);\n              }}\n              options={timezoneList}\n              style={{ width: 300 }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Add timezone\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </FormControl>\n        </TableCell>\n      </TableRow>\n    );\n  };\n\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <Schedule />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Timezone Conversion Table\n        </Typography>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Timezone</TableCell>\n                <TableCell align=\"left\">Now</TableCell>\n                <TableCell align=\"left\"></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {state.data.map((row, timezoneIndex) => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"td\" scope=\"row\">\n                    {row.name}\n                    {timezoneIndex > 0 && (\n                      <IconButton\n                        aria-label=\"delete\"\n                        onClick={() =>\n                          dispatch({ type: 'deleteTimezone', value: row.name })\n                        }\n                      >\n                        <DeleteOutline />\n                      </IconButton>\n                    )}\n                  </TableCell>\n                  {row.times.map((time, timeIndex) => (\n                    <TableCell key={`${row.name}-${timeIndex}`} align=\"left\">\n                      {time.format('YYYY-MM-DD')}\n                      <br />\n                      {time.format('HH:mm:ss')}\n                      <br />\n                      {time.format('hh:mm:ss A')}\n                    </TableCell>\n                  ))}\n                  <AddDateTimeCell\n                    row={row}\n                    timezoneIndex={timezoneIndex}\n                    open={row.name === state.popoverOpen}\n                    dispatch={dispatch}\n                  />\n                </TableRow>\n              ))}\n              {addNewTimezone()}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}